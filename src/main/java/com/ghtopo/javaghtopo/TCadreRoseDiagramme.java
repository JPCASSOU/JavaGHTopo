/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ghtopo.javaghtopo;

import static GHTopoOperationnel.GeneralFunctions.*;
import GHTopoOperationnel.TTableDesEntites;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;

/**
 *
 * @author jean-pierre.cassou
 */
public class TCadreRoseDiagramme extends javax.swing.JPanel {
    
    private TTableDesEntites myTableEntites; 
    private boolean fCanDrawDiagramme = false;
    public void initialiser(TTableDesEntites t)
    {
        myTableEntites = t;
        myTableEntites.applyMetaFiltre("");
        fCanDrawDiagramme = myTableEntites.ParseRoseDiagram(40, 0.10);
        int Nb = myTableEntites.getRoseDiagramNbPetales();
        afficherMessageFmt("Rose des directions: %d", Nb);
        double toto = 0.00;
        double WU = 360.00 / Nb;
        for (int i = 0; i < Nb; i++)
        {
            double EWE = myTableEntites.getRoseDiagramValueByIdx(i);
            toto += EWE;
            afficherMessageFmt("%d: [%.0f; %.0f[ = %.2f", i, WU * i, WU * (i+1), EWE);
        }
        
    }
       
            
    public void paint(Graphics g)        
    {
        final int MARGIN = 2;
        String EWE = fCanDrawDiagramme ? "OK" : "KO";
        try
        {    
            if (fCanDrawDiagramme)
            {
                // Appel de la méthode paintComponent de la classe mère
                //super.paintComponent(g);
                // Conversion en un contexte 2D
                Graphics2D g2 = (Graphics2D) g;
                //Graphics2D g2 = (Graphics2D) g; 
                int h = this.getHeight();
                int w = this.getWidth();
                int MG = 10;
                int cx = trunc(w / 2);
                int cy = trunc(w / 2);
                int r  = cx - MG;
                g2.setColor(Color.white);
                g2.fillRect(0, 0, w, h);
                g2.setColor(Color.blue);
                g2.drawOval(MG, MG, w - 2 * MG, h - 2 * MG);
                int NbP = myTableEntites.getRoseDiagramNbPetales();
                double Interval = Math.PI / NbP;
                for (int j = 0; j < 2; j++)
                {    
                    double pipi = Math.PI * (j + 1.5);
                    for (int i = 0; i < NbP; i++)
                    {
                        double penetration = myTableEntites.getRoseDiagramValueByIdx(i);
                        Polygon P = new Polygon();
                        P.addPoint(cx, cy);
                        double A1 = pipi + Interval * i;
                        double A2 = pipi + Interval * (i + 1);
                        
                        double q = r * penetration;
                        P.addPoint(cx + trunc(q * Math.cos(A1)),
                                   cy + trunc(q * Math.sin(A1)));
                        P.addPoint(cx + trunc(q * Math.cos(A2)),
                                   cy + trunc(q * Math.sin(A2)));
                        
                        g2.setColor(Color.CYAN);
                        g2.fillPolygon(P);
                        g2.setColor(Color.BLUE);
                        g2.drawPolygon(P);
                    }    
                }
            }    
        }
        catch (Exception e)
        {
            e.printStackTrace();
        } 
    }
        
    /**
     * Creates new form TCanvasRoseDiagramme
     */
    public TCadreRoseDiagramme() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 386, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
